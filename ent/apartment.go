// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"pinares/ent/apartment"
	"pinares/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Apartment is the model entity for the Apartment schema.
type Apartment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Area holds the value of the "area" field.
	Area int16 `json:"area,omitempty"`
	// Floor holds the value of the "floor" field.
	Floor int16 `json:"floor,omitempty"`
	// Number holds the value of the "number" field.
	Number int16 `json:"number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApartmentQuery when eager-loading is set.
	Edges            ApartmentEdges `json:"edges"`
	apartment_owner  *int
	tower_apartments *int
	selectValues     sql.SelectValues
}

// ApartmentEdges holds the relations/edges for other nodes in the graph.
type ApartmentEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApartmentEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Apartment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apartment.FieldID, apartment.FieldArea, apartment.FieldFloor, apartment.FieldNumber:
			values[i] = new(sql.NullInt64)
		case apartment.ForeignKeys[0]: // apartment_owner
			values[i] = new(sql.NullInt64)
		case apartment.ForeignKeys[1]: // tower_apartments
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Apartment fields.
func (a *Apartment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apartment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case apartment.FieldArea:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				a.Area = int16(value.Int64)
			}
		case apartment.FieldFloor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field floor", values[i])
			} else if value.Valid {
				a.Floor = int16(value.Int64)
			}
		case apartment.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				a.Number = int16(value.Int64)
			}
		case apartment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field apartment_owner", value)
			} else if value.Valid {
				a.apartment_owner = new(int)
				*a.apartment_owner = int(value.Int64)
			}
		case apartment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field tower_apartments", value)
			} else if value.Valid {
				a.tower_apartments = new(int)
				*a.tower_apartments = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Apartment.
// This includes values selected through modifiers, order, etc.
func (a *Apartment) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Apartment entity.
func (a *Apartment) QueryOwner() *UserQuery {
	return NewApartmentClient(a.config).QueryOwner(a)
}

// Update returns a builder for updating this Apartment.
// Note that you need to call Apartment.Unwrap() before calling this method if this Apartment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Apartment) Update() *ApartmentUpdateOne {
	return NewApartmentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Apartment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Apartment) Unwrap() *Apartment {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Apartment is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Apartment) String() string {
	var builder strings.Builder
	builder.WriteString("Apartment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("area=")
	builder.WriteString(fmt.Sprintf("%v", a.Area))
	builder.WriteString(", ")
	builder.WriteString("floor=")
	builder.WriteString(fmt.Sprintf("%v", a.Floor))
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", a.Number))
	builder.WriteByte(')')
	return builder.String()
}

// Apartments is a parsable slice of Apartment.
type Apartments []*Apartment
