// Code generated by ent, DO NOT EDIT.

package tower

import (
	"pinares/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tower {
	return predicate.Tower(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tower {
	return predicate.Tower(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tower {
	return predicate.Tower(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tower {
	return predicate.Tower(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tower {
	return predicate.Tower(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tower {
	return predicate.Tower(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tower {
	return predicate.Tower(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tower {
	return predicate.Tower(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tower {
	return predicate.Tower(sql.FieldLTE(FieldID, id))
}

// NumberOfFloors applies equality check predicate on the "number_of_floors" field. It's identical to NumberOfFloorsEQ.
func NumberOfFloors(v int) predicate.Tower {
	return predicate.Tower(sql.FieldEQ(FieldNumberOfFloors, v))
}

// NumberOfApartmentsPerFloor applies equality check predicate on the "number_of_apartments_per_floor" field. It's identical to NumberOfApartmentsPerFloorEQ.
func NumberOfApartmentsPerFloor(v int) predicate.Tower {
	return predicate.Tower(sql.FieldEQ(FieldNumberOfApartmentsPerFloor, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Tower {
	return predicate.Tower(sql.FieldEQ(FieldName, v))
}

// RegisteredAt applies equality check predicate on the "registered_at" field. It's identical to RegisteredAtEQ.
func RegisteredAt(v time.Time) predicate.Tower {
	return predicate.Tower(sql.FieldEQ(FieldRegisteredAt, v))
}

// NumberOfFloorsEQ applies the EQ predicate on the "number_of_floors" field.
func NumberOfFloorsEQ(v int) predicate.Tower {
	return predicate.Tower(sql.FieldEQ(FieldNumberOfFloors, v))
}

// NumberOfFloorsNEQ applies the NEQ predicate on the "number_of_floors" field.
func NumberOfFloorsNEQ(v int) predicate.Tower {
	return predicate.Tower(sql.FieldNEQ(FieldNumberOfFloors, v))
}

// NumberOfFloorsIn applies the In predicate on the "number_of_floors" field.
func NumberOfFloorsIn(vs ...int) predicate.Tower {
	return predicate.Tower(sql.FieldIn(FieldNumberOfFloors, vs...))
}

// NumberOfFloorsNotIn applies the NotIn predicate on the "number_of_floors" field.
func NumberOfFloorsNotIn(vs ...int) predicate.Tower {
	return predicate.Tower(sql.FieldNotIn(FieldNumberOfFloors, vs...))
}

// NumberOfFloorsGT applies the GT predicate on the "number_of_floors" field.
func NumberOfFloorsGT(v int) predicate.Tower {
	return predicate.Tower(sql.FieldGT(FieldNumberOfFloors, v))
}

// NumberOfFloorsGTE applies the GTE predicate on the "number_of_floors" field.
func NumberOfFloorsGTE(v int) predicate.Tower {
	return predicate.Tower(sql.FieldGTE(FieldNumberOfFloors, v))
}

// NumberOfFloorsLT applies the LT predicate on the "number_of_floors" field.
func NumberOfFloorsLT(v int) predicate.Tower {
	return predicate.Tower(sql.FieldLT(FieldNumberOfFloors, v))
}

// NumberOfFloorsLTE applies the LTE predicate on the "number_of_floors" field.
func NumberOfFloorsLTE(v int) predicate.Tower {
	return predicate.Tower(sql.FieldLTE(FieldNumberOfFloors, v))
}

// NumberOfApartmentsPerFloorEQ applies the EQ predicate on the "number_of_apartments_per_floor" field.
func NumberOfApartmentsPerFloorEQ(v int) predicate.Tower {
	return predicate.Tower(sql.FieldEQ(FieldNumberOfApartmentsPerFloor, v))
}

// NumberOfApartmentsPerFloorNEQ applies the NEQ predicate on the "number_of_apartments_per_floor" field.
func NumberOfApartmentsPerFloorNEQ(v int) predicate.Tower {
	return predicate.Tower(sql.FieldNEQ(FieldNumberOfApartmentsPerFloor, v))
}

// NumberOfApartmentsPerFloorIn applies the In predicate on the "number_of_apartments_per_floor" field.
func NumberOfApartmentsPerFloorIn(vs ...int) predicate.Tower {
	return predicate.Tower(sql.FieldIn(FieldNumberOfApartmentsPerFloor, vs...))
}

// NumberOfApartmentsPerFloorNotIn applies the NotIn predicate on the "number_of_apartments_per_floor" field.
func NumberOfApartmentsPerFloorNotIn(vs ...int) predicate.Tower {
	return predicate.Tower(sql.FieldNotIn(FieldNumberOfApartmentsPerFloor, vs...))
}

// NumberOfApartmentsPerFloorGT applies the GT predicate on the "number_of_apartments_per_floor" field.
func NumberOfApartmentsPerFloorGT(v int) predicate.Tower {
	return predicate.Tower(sql.FieldGT(FieldNumberOfApartmentsPerFloor, v))
}

// NumberOfApartmentsPerFloorGTE applies the GTE predicate on the "number_of_apartments_per_floor" field.
func NumberOfApartmentsPerFloorGTE(v int) predicate.Tower {
	return predicate.Tower(sql.FieldGTE(FieldNumberOfApartmentsPerFloor, v))
}

// NumberOfApartmentsPerFloorLT applies the LT predicate on the "number_of_apartments_per_floor" field.
func NumberOfApartmentsPerFloorLT(v int) predicate.Tower {
	return predicate.Tower(sql.FieldLT(FieldNumberOfApartmentsPerFloor, v))
}

// NumberOfApartmentsPerFloorLTE applies the LTE predicate on the "number_of_apartments_per_floor" field.
func NumberOfApartmentsPerFloorLTE(v int) predicate.Tower {
	return predicate.Tower(sql.FieldLTE(FieldNumberOfApartmentsPerFloor, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Tower {
	return predicate.Tower(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Tower {
	return predicate.Tower(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Tower {
	return predicate.Tower(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Tower {
	return predicate.Tower(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Tower {
	return predicate.Tower(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Tower {
	return predicate.Tower(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Tower {
	return predicate.Tower(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Tower {
	return predicate.Tower(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Tower {
	return predicate.Tower(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Tower {
	return predicate.Tower(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Tower {
	return predicate.Tower(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Tower {
	return predicate.Tower(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Tower {
	return predicate.Tower(sql.FieldContainsFold(FieldName, v))
}

// RegisteredAtEQ applies the EQ predicate on the "registered_at" field.
func RegisteredAtEQ(v time.Time) predicate.Tower {
	return predicate.Tower(sql.FieldEQ(FieldRegisteredAt, v))
}

// RegisteredAtNEQ applies the NEQ predicate on the "registered_at" field.
func RegisteredAtNEQ(v time.Time) predicate.Tower {
	return predicate.Tower(sql.FieldNEQ(FieldRegisteredAt, v))
}

// RegisteredAtIn applies the In predicate on the "registered_at" field.
func RegisteredAtIn(vs ...time.Time) predicate.Tower {
	return predicate.Tower(sql.FieldIn(FieldRegisteredAt, vs...))
}

// RegisteredAtNotIn applies the NotIn predicate on the "registered_at" field.
func RegisteredAtNotIn(vs ...time.Time) predicate.Tower {
	return predicate.Tower(sql.FieldNotIn(FieldRegisteredAt, vs...))
}

// RegisteredAtGT applies the GT predicate on the "registered_at" field.
func RegisteredAtGT(v time.Time) predicate.Tower {
	return predicate.Tower(sql.FieldGT(FieldRegisteredAt, v))
}

// RegisteredAtGTE applies the GTE predicate on the "registered_at" field.
func RegisteredAtGTE(v time.Time) predicate.Tower {
	return predicate.Tower(sql.FieldGTE(FieldRegisteredAt, v))
}

// RegisteredAtLT applies the LT predicate on the "registered_at" field.
func RegisteredAtLT(v time.Time) predicate.Tower {
	return predicate.Tower(sql.FieldLT(FieldRegisteredAt, v))
}

// RegisteredAtLTE applies the LTE predicate on the "registered_at" field.
func RegisteredAtLTE(v time.Time) predicate.Tower {
	return predicate.Tower(sql.FieldLTE(FieldRegisteredAt, v))
}

// HasApartments applies the HasEdge predicate on the "apartments" edge.
func HasApartments() predicate.Tower {
	return predicate.Tower(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApartmentsTable, ApartmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApartmentsWith applies the HasEdge predicate on the "apartments" edge with a given conditions (other predicates).
func HasApartmentsWith(preds ...predicate.Apartment) predicate.Tower {
	return predicate.Tower(func(s *sql.Selector) {
		step := newApartmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tower) predicate.Tower {
	return predicate.Tower(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tower) predicate.Tower {
	return predicate.Tower(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tower) predicate.Tower {
	return predicate.Tower(sql.NotPredicates(p))
}
