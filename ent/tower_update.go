// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pinares/ent/apartment"
	"pinares/ent/predicate"
	"pinares/ent/tower"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TowerUpdate is the builder for updating Tower entities.
type TowerUpdate struct {
	config
	hooks    []Hook
	mutation *TowerMutation
}

// Where appends a list predicates to the TowerUpdate builder.
func (tu *TowerUpdate) Where(ps ...predicate.Tower) *TowerUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetNumberOfFloors sets the "number_of_floors" field.
func (tu *TowerUpdate) SetNumberOfFloors(i int) *TowerUpdate {
	tu.mutation.ResetNumberOfFloors()
	tu.mutation.SetNumberOfFloors(i)
	return tu
}

// SetNillableNumberOfFloors sets the "number_of_floors" field if the given value is not nil.
func (tu *TowerUpdate) SetNillableNumberOfFloors(i *int) *TowerUpdate {
	if i != nil {
		tu.SetNumberOfFloors(*i)
	}
	return tu
}

// AddNumberOfFloors adds i to the "number_of_floors" field.
func (tu *TowerUpdate) AddNumberOfFloors(i int) *TowerUpdate {
	tu.mutation.AddNumberOfFloors(i)
	return tu
}

// SetNumberOfApartmentsPerFloor sets the "number_of_apartments_per_floor" field.
func (tu *TowerUpdate) SetNumberOfApartmentsPerFloor(i int) *TowerUpdate {
	tu.mutation.ResetNumberOfApartmentsPerFloor()
	tu.mutation.SetNumberOfApartmentsPerFloor(i)
	return tu
}

// SetNillableNumberOfApartmentsPerFloor sets the "number_of_apartments_per_floor" field if the given value is not nil.
func (tu *TowerUpdate) SetNillableNumberOfApartmentsPerFloor(i *int) *TowerUpdate {
	if i != nil {
		tu.SetNumberOfApartmentsPerFloor(*i)
	}
	return tu
}

// AddNumberOfApartmentsPerFloor adds i to the "number_of_apartments_per_floor" field.
func (tu *TowerUpdate) AddNumberOfApartmentsPerFloor(i int) *TowerUpdate {
	tu.mutation.AddNumberOfApartmentsPerFloor(i)
	return tu
}

// SetName sets the "name" field.
func (tu *TowerUpdate) SetName(s string) *TowerUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TowerUpdate) SetNillableName(s *string) *TowerUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetRegisteredAt sets the "registered_at" field.
func (tu *TowerUpdate) SetRegisteredAt(t time.Time) *TowerUpdate {
	tu.mutation.SetRegisteredAt(t)
	return tu
}

// SetNillableRegisteredAt sets the "registered_at" field if the given value is not nil.
func (tu *TowerUpdate) SetNillableRegisteredAt(t *time.Time) *TowerUpdate {
	if t != nil {
		tu.SetRegisteredAt(*t)
	}
	return tu
}

// AddApartmentIDs adds the "apartments" edge to the Apartment entity by IDs.
func (tu *TowerUpdate) AddApartmentIDs(ids ...int) *TowerUpdate {
	tu.mutation.AddApartmentIDs(ids...)
	return tu
}

// AddApartments adds the "apartments" edges to the Apartment entity.
func (tu *TowerUpdate) AddApartments(a ...*Apartment) *TowerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddApartmentIDs(ids...)
}

// Mutation returns the TowerMutation object of the builder.
func (tu *TowerUpdate) Mutation() *TowerMutation {
	return tu.mutation
}

// ClearApartments clears all "apartments" edges to the Apartment entity.
func (tu *TowerUpdate) ClearApartments() *TowerUpdate {
	tu.mutation.ClearApartments()
	return tu
}

// RemoveApartmentIDs removes the "apartments" edge to Apartment entities by IDs.
func (tu *TowerUpdate) RemoveApartmentIDs(ids ...int) *TowerUpdate {
	tu.mutation.RemoveApartmentIDs(ids...)
	return tu
}

// RemoveApartments removes "apartments" edges to Apartment entities.
func (tu *TowerUpdate) RemoveApartments(a ...*Apartment) *TowerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveApartmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TowerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TowerUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TowerUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TowerUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TowerUpdate) check() error {
	if v, ok := tu.mutation.NumberOfFloors(); ok {
		if err := tower.NumberOfFloorsValidator(v); err != nil {
			return &ValidationError{Name: "number_of_floors", err: fmt.Errorf(`ent: validator failed for field "Tower.number_of_floors": %w`, err)}
		}
	}
	if v, ok := tu.mutation.NumberOfApartmentsPerFloor(); ok {
		if err := tower.NumberOfApartmentsPerFloorValidator(v); err != nil {
			return &ValidationError{Name: "number_of_apartments_per_floor", err: fmt.Errorf(`ent: validator failed for field "Tower.number_of_apartments_per_floor": %w`, err)}
		}
	}
	return nil
}

func (tu *TowerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tower.Table, tower.Columns, sqlgraph.NewFieldSpec(tower.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.NumberOfFloors(); ok {
		_spec.SetField(tower.FieldNumberOfFloors, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedNumberOfFloors(); ok {
		_spec.AddField(tower.FieldNumberOfFloors, field.TypeInt, value)
	}
	if value, ok := tu.mutation.NumberOfApartmentsPerFloor(); ok {
		_spec.SetField(tower.FieldNumberOfApartmentsPerFloor, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedNumberOfApartmentsPerFloor(); ok {
		_spec.AddField(tower.FieldNumberOfApartmentsPerFloor, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tower.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.RegisteredAt(); ok {
		_spec.SetField(tower.FieldRegisteredAt, field.TypeTime, value)
	}
	if tu.mutation.ApartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tower.ApartmentsTable,
			Columns: []string{tower.ApartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apartment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedApartmentsIDs(); len(nodes) > 0 && !tu.mutation.ApartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tower.ApartmentsTable,
			Columns: []string{tower.ApartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apartment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ApartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tower.ApartmentsTable,
			Columns: []string{tower.ApartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apartment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tower.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TowerUpdateOne is the builder for updating a single Tower entity.
type TowerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TowerMutation
}

// SetNumberOfFloors sets the "number_of_floors" field.
func (tuo *TowerUpdateOne) SetNumberOfFloors(i int) *TowerUpdateOne {
	tuo.mutation.ResetNumberOfFloors()
	tuo.mutation.SetNumberOfFloors(i)
	return tuo
}

// SetNillableNumberOfFloors sets the "number_of_floors" field if the given value is not nil.
func (tuo *TowerUpdateOne) SetNillableNumberOfFloors(i *int) *TowerUpdateOne {
	if i != nil {
		tuo.SetNumberOfFloors(*i)
	}
	return tuo
}

// AddNumberOfFloors adds i to the "number_of_floors" field.
func (tuo *TowerUpdateOne) AddNumberOfFloors(i int) *TowerUpdateOne {
	tuo.mutation.AddNumberOfFloors(i)
	return tuo
}

// SetNumberOfApartmentsPerFloor sets the "number_of_apartments_per_floor" field.
func (tuo *TowerUpdateOne) SetNumberOfApartmentsPerFloor(i int) *TowerUpdateOne {
	tuo.mutation.ResetNumberOfApartmentsPerFloor()
	tuo.mutation.SetNumberOfApartmentsPerFloor(i)
	return tuo
}

// SetNillableNumberOfApartmentsPerFloor sets the "number_of_apartments_per_floor" field if the given value is not nil.
func (tuo *TowerUpdateOne) SetNillableNumberOfApartmentsPerFloor(i *int) *TowerUpdateOne {
	if i != nil {
		tuo.SetNumberOfApartmentsPerFloor(*i)
	}
	return tuo
}

// AddNumberOfApartmentsPerFloor adds i to the "number_of_apartments_per_floor" field.
func (tuo *TowerUpdateOne) AddNumberOfApartmentsPerFloor(i int) *TowerUpdateOne {
	tuo.mutation.AddNumberOfApartmentsPerFloor(i)
	return tuo
}

// SetName sets the "name" field.
func (tuo *TowerUpdateOne) SetName(s string) *TowerUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TowerUpdateOne) SetNillableName(s *string) *TowerUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetRegisteredAt sets the "registered_at" field.
func (tuo *TowerUpdateOne) SetRegisteredAt(t time.Time) *TowerUpdateOne {
	tuo.mutation.SetRegisteredAt(t)
	return tuo
}

// SetNillableRegisteredAt sets the "registered_at" field if the given value is not nil.
func (tuo *TowerUpdateOne) SetNillableRegisteredAt(t *time.Time) *TowerUpdateOne {
	if t != nil {
		tuo.SetRegisteredAt(*t)
	}
	return tuo
}

// AddApartmentIDs adds the "apartments" edge to the Apartment entity by IDs.
func (tuo *TowerUpdateOne) AddApartmentIDs(ids ...int) *TowerUpdateOne {
	tuo.mutation.AddApartmentIDs(ids...)
	return tuo
}

// AddApartments adds the "apartments" edges to the Apartment entity.
func (tuo *TowerUpdateOne) AddApartments(a ...*Apartment) *TowerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddApartmentIDs(ids...)
}

// Mutation returns the TowerMutation object of the builder.
func (tuo *TowerUpdateOne) Mutation() *TowerMutation {
	return tuo.mutation
}

// ClearApartments clears all "apartments" edges to the Apartment entity.
func (tuo *TowerUpdateOne) ClearApartments() *TowerUpdateOne {
	tuo.mutation.ClearApartments()
	return tuo
}

// RemoveApartmentIDs removes the "apartments" edge to Apartment entities by IDs.
func (tuo *TowerUpdateOne) RemoveApartmentIDs(ids ...int) *TowerUpdateOne {
	tuo.mutation.RemoveApartmentIDs(ids...)
	return tuo
}

// RemoveApartments removes "apartments" edges to Apartment entities.
func (tuo *TowerUpdateOne) RemoveApartments(a ...*Apartment) *TowerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveApartmentIDs(ids...)
}

// Where appends a list predicates to the TowerUpdate builder.
func (tuo *TowerUpdateOne) Where(ps ...predicate.Tower) *TowerUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TowerUpdateOne) Select(field string, fields ...string) *TowerUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tower entity.
func (tuo *TowerUpdateOne) Save(ctx context.Context) (*Tower, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TowerUpdateOne) SaveX(ctx context.Context) *Tower {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TowerUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TowerUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TowerUpdateOne) check() error {
	if v, ok := tuo.mutation.NumberOfFloors(); ok {
		if err := tower.NumberOfFloorsValidator(v); err != nil {
			return &ValidationError{Name: "number_of_floors", err: fmt.Errorf(`ent: validator failed for field "Tower.number_of_floors": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.NumberOfApartmentsPerFloor(); ok {
		if err := tower.NumberOfApartmentsPerFloorValidator(v); err != nil {
			return &ValidationError{Name: "number_of_apartments_per_floor", err: fmt.Errorf(`ent: validator failed for field "Tower.number_of_apartments_per_floor": %w`, err)}
		}
	}
	return nil
}

func (tuo *TowerUpdateOne) sqlSave(ctx context.Context) (_node *Tower, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tower.Table, tower.Columns, sqlgraph.NewFieldSpec(tower.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tower.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tower.FieldID)
		for _, f := range fields {
			if !tower.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tower.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.NumberOfFloors(); ok {
		_spec.SetField(tower.FieldNumberOfFloors, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedNumberOfFloors(); ok {
		_spec.AddField(tower.FieldNumberOfFloors, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.NumberOfApartmentsPerFloor(); ok {
		_spec.SetField(tower.FieldNumberOfApartmentsPerFloor, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedNumberOfApartmentsPerFloor(); ok {
		_spec.AddField(tower.FieldNumberOfApartmentsPerFloor, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tower.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.RegisteredAt(); ok {
		_spec.SetField(tower.FieldRegisteredAt, field.TypeTime, value)
	}
	if tuo.mutation.ApartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tower.ApartmentsTable,
			Columns: []string{tower.ApartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apartment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedApartmentsIDs(); len(nodes) > 0 && !tuo.mutation.ApartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tower.ApartmentsTable,
			Columns: []string{tower.ApartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apartment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ApartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tower.ApartmentsTable,
			Columns: []string{tower.ApartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apartment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tower{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tower.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
