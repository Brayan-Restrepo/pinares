// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"pinares/ent/tower"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tower is the model entity for the Tower schema.
type Tower struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// NumberOfFloors holds the value of the "number_of_floors" field.
	NumberOfFloors int `json:"number_of_floors,omitempty"`
	// NumberOfApartmentsPerFloor holds the value of the "number_of_apartments_per_floor" field.
	NumberOfApartmentsPerFloor int `json:"number_of_apartments_per_floor,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// RegisteredAt holds the value of the "registered_at" field.
	RegisteredAt time.Time `json:"registered_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TowerQuery when eager-loading is set.
	Edges        TowerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TowerEdges holds the relations/edges for other nodes in the graph.
type TowerEdges struct {
	// Apartments holds the value of the apartments edge.
	Apartments []*Apartment `json:"apartments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ApartmentsOrErr returns the Apartments value or an error if the edge
// was not loaded in eager-loading.
func (e TowerEdges) ApartmentsOrErr() ([]*Apartment, error) {
	if e.loadedTypes[0] {
		return e.Apartments, nil
	}
	return nil, &NotLoadedError{edge: "apartments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tower) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tower.FieldID, tower.FieldNumberOfFloors, tower.FieldNumberOfApartmentsPerFloor:
			values[i] = new(sql.NullInt64)
		case tower.FieldName:
			values[i] = new(sql.NullString)
		case tower.FieldRegisteredAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tower fields.
func (t *Tower) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tower.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tower.FieldNumberOfFloors:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_of_floors", values[i])
			} else if value.Valid {
				t.NumberOfFloors = int(value.Int64)
			}
		case tower.FieldNumberOfApartmentsPerFloor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_of_apartments_per_floor", values[i])
			} else if value.Valid {
				t.NumberOfApartmentsPerFloor = int(value.Int64)
			}
		case tower.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case tower.FieldRegisteredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registered_at", values[i])
			} else if value.Valid {
				t.RegisteredAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tower.
// This includes values selected through modifiers, order, etc.
func (t *Tower) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryApartments queries the "apartments" edge of the Tower entity.
func (t *Tower) QueryApartments() *ApartmentQuery {
	return NewTowerClient(t.config).QueryApartments(t)
}

// Update returns a builder for updating this Tower.
// Note that you need to call Tower.Unwrap() before calling this method if this Tower
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tower) Update() *TowerUpdateOne {
	return NewTowerClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tower entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tower) Unwrap() *Tower {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tower is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tower) String() string {
	var builder strings.Builder
	builder.WriteString("Tower(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("number_of_floors=")
	builder.WriteString(fmt.Sprintf("%v", t.NumberOfFloors))
	builder.WriteString(", ")
	builder.WriteString("number_of_apartments_per_floor=")
	builder.WriteString(fmt.Sprintf("%v", t.NumberOfApartmentsPerFloor))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("registered_at=")
	builder.WriteString(t.RegisteredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Towers is a parsable slice of Tower.
type Towers []*Tower
