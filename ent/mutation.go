// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pinares/ent/apartment"
	"pinares/ent/predicate"
	"pinares/ent/tower"
	"pinares/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApartment = "Apartment"
	TypeTower     = "Tower"
	TypeUser      = "User"
)

// ApartmentMutation represents an operation that mutates the Apartment nodes in the graph.
type ApartmentMutation struct {
	config
	op            Op
	typ           string
	id            *int
	area          *int16
	addarea       *int16
	floor         *int16
	addfloor      *int16
	number        *int16
	addnumber     *int16
	clearedFields map[string]struct{}
	owner         *int
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*Apartment, error)
	predicates    []predicate.Apartment
}

var _ ent.Mutation = (*ApartmentMutation)(nil)

// apartmentOption allows management of the mutation configuration using functional options.
type apartmentOption func(*ApartmentMutation)

// newApartmentMutation creates new mutation for the Apartment entity.
func newApartmentMutation(c config, op Op, opts ...apartmentOption) *ApartmentMutation {
	m := &ApartmentMutation{
		config:        c,
		op:            op,
		typ:           TypeApartment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApartmentID sets the ID field of the mutation.
func withApartmentID(id int) apartmentOption {
	return func(m *ApartmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Apartment
		)
		m.oldValue = func(ctx context.Context) (*Apartment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Apartment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApartment sets the old Apartment of the mutation.
func withApartment(node *Apartment) apartmentOption {
	return func(m *ApartmentMutation) {
		m.oldValue = func(context.Context) (*Apartment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApartmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApartmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApartmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApartmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Apartment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetArea sets the "area" field.
func (m *ApartmentMutation) SetArea(i int16) {
	m.area = &i
	m.addarea = nil
}

// Area returns the value of the "area" field in the mutation.
func (m *ApartmentMutation) Area() (r int16, exists bool) {
	v := m.area
	if v == nil {
		return
	}
	return *v, true
}

// OldArea returns the old "area" field's value of the Apartment entity.
// If the Apartment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApartmentMutation) OldArea(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArea: %w", err)
	}
	return oldValue.Area, nil
}

// AddArea adds i to the "area" field.
func (m *ApartmentMutation) AddArea(i int16) {
	if m.addarea != nil {
		*m.addarea += i
	} else {
		m.addarea = &i
	}
}

// AddedArea returns the value that was added to the "area" field in this mutation.
func (m *ApartmentMutation) AddedArea() (r int16, exists bool) {
	v := m.addarea
	if v == nil {
		return
	}
	return *v, true
}

// ResetArea resets all changes to the "area" field.
func (m *ApartmentMutation) ResetArea() {
	m.area = nil
	m.addarea = nil
}

// SetFloor sets the "floor" field.
func (m *ApartmentMutation) SetFloor(i int16) {
	m.floor = &i
	m.addfloor = nil
}

// Floor returns the value of the "floor" field in the mutation.
func (m *ApartmentMutation) Floor() (r int16, exists bool) {
	v := m.floor
	if v == nil {
		return
	}
	return *v, true
}

// OldFloor returns the old "floor" field's value of the Apartment entity.
// If the Apartment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApartmentMutation) OldFloor(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFloor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFloor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFloor: %w", err)
	}
	return oldValue.Floor, nil
}

// AddFloor adds i to the "floor" field.
func (m *ApartmentMutation) AddFloor(i int16) {
	if m.addfloor != nil {
		*m.addfloor += i
	} else {
		m.addfloor = &i
	}
}

// AddedFloor returns the value that was added to the "floor" field in this mutation.
func (m *ApartmentMutation) AddedFloor() (r int16, exists bool) {
	v := m.addfloor
	if v == nil {
		return
	}
	return *v, true
}

// ResetFloor resets all changes to the "floor" field.
func (m *ApartmentMutation) ResetFloor() {
	m.floor = nil
	m.addfloor = nil
}

// SetNumber sets the "number" field.
func (m *ApartmentMutation) SetNumber(i int16) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *ApartmentMutation) Number() (r int16, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Apartment entity.
// If the Apartment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApartmentMutation) OldNumber(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *ApartmentMutation) AddNumber(i int16) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *ApartmentMutation) AddedNumber() (r int16, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *ApartmentMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *ApartmentMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *ApartmentMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *ApartmentMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *ApartmentMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *ApartmentMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *ApartmentMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the ApartmentMutation builder.
func (m *ApartmentMutation) Where(ps ...predicate.Apartment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApartmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApartmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Apartment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApartmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApartmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Apartment).
func (m *ApartmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApartmentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.area != nil {
		fields = append(fields, apartment.FieldArea)
	}
	if m.floor != nil {
		fields = append(fields, apartment.FieldFloor)
	}
	if m.number != nil {
		fields = append(fields, apartment.FieldNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApartmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apartment.FieldArea:
		return m.Area()
	case apartment.FieldFloor:
		return m.Floor()
	case apartment.FieldNumber:
		return m.Number()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApartmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apartment.FieldArea:
		return m.OldArea(ctx)
	case apartment.FieldFloor:
		return m.OldFloor(ctx)
	case apartment.FieldNumber:
		return m.OldNumber(ctx)
	}
	return nil, fmt.Errorf("unknown Apartment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApartmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apartment.FieldArea:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArea(v)
		return nil
	case apartment.FieldFloor:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFloor(v)
		return nil
	case apartment.FieldNumber:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Apartment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApartmentMutation) AddedFields() []string {
	var fields []string
	if m.addarea != nil {
		fields = append(fields, apartment.FieldArea)
	}
	if m.addfloor != nil {
		fields = append(fields, apartment.FieldFloor)
	}
	if m.addnumber != nil {
		fields = append(fields, apartment.FieldNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApartmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case apartment.FieldArea:
		return m.AddedArea()
	case apartment.FieldFloor:
		return m.AddedFloor()
	case apartment.FieldNumber:
		return m.AddedNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApartmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case apartment.FieldArea:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddArea(v)
		return nil
	case apartment.FieldFloor:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFloor(v)
		return nil
	case apartment.FieldNumber:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Apartment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApartmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApartmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApartmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Apartment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApartmentMutation) ResetField(name string) error {
	switch name {
	case apartment.FieldArea:
		m.ResetArea()
		return nil
	case apartment.FieldFloor:
		m.ResetFloor()
		return nil
	case apartment.FieldNumber:
		m.ResetNumber()
		return nil
	}
	return fmt.Errorf("unknown Apartment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApartmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, apartment.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApartmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case apartment.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApartmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApartmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApartmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, apartment.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApartmentMutation) EdgeCleared(name string) bool {
	switch name {
	case apartment.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApartmentMutation) ClearEdge(name string) error {
	switch name {
	case apartment.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Apartment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApartmentMutation) ResetEdge(name string) error {
	switch name {
	case apartment.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Apartment edge %s", name)
}

// TowerMutation represents an operation that mutates the Tower nodes in the graph.
type TowerMutation struct {
	config
	op                                Op
	typ                               string
	id                                *int
	number_of_floors                  *int
	addnumber_of_floors               *int
	number_of_apartments_per_floor    *int
	addnumber_of_apartments_per_floor *int
	name                              *string
	registered_at                     *time.Time
	clearedFields                     map[string]struct{}
	apartments                        map[int]struct{}
	removedapartments                 map[int]struct{}
	clearedapartments                 bool
	done                              bool
	oldValue                          func(context.Context) (*Tower, error)
	predicates                        []predicate.Tower
}

var _ ent.Mutation = (*TowerMutation)(nil)

// towerOption allows management of the mutation configuration using functional options.
type towerOption func(*TowerMutation)

// newTowerMutation creates new mutation for the Tower entity.
func newTowerMutation(c config, op Op, opts ...towerOption) *TowerMutation {
	m := &TowerMutation{
		config:        c,
		op:            op,
		typ:           TypeTower,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTowerID sets the ID field of the mutation.
func withTowerID(id int) towerOption {
	return func(m *TowerMutation) {
		var (
			err   error
			once  sync.Once
			value *Tower
		)
		m.oldValue = func(ctx context.Context) (*Tower, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tower.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTower sets the old Tower of the mutation.
func withTower(node *Tower) towerOption {
	return func(m *TowerMutation) {
		m.oldValue = func(context.Context) (*Tower, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TowerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TowerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TowerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TowerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tower.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumberOfFloors sets the "number_of_floors" field.
func (m *TowerMutation) SetNumberOfFloors(i int) {
	m.number_of_floors = &i
	m.addnumber_of_floors = nil
}

// NumberOfFloors returns the value of the "number_of_floors" field in the mutation.
func (m *TowerMutation) NumberOfFloors() (r int, exists bool) {
	v := m.number_of_floors
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberOfFloors returns the old "number_of_floors" field's value of the Tower entity.
// If the Tower object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TowerMutation) OldNumberOfFloors(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberOfFloors is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberOfFloors requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberOfFloors: %w", err)
	}
	return oldValue.NumberOfFloors, nil
}

// AddNumberOfFloors adds i to the "number_of_floors" field.
func (m *TowerMutation) AddNumberOfFloors(i int) {
	if m.addnumber_of_floors != nil {
		*m.addnumber_of_floors += i
	} else {
		m.addnumber_of_floors = &i
	}
}

// AddedNumberOfFloors returns the value that was added to the "number_of_floors" field in this mutation.
func (m *TowerMutation) AddedNumberOfFloors() (r int, exists bool) {
	v := m.addnumber_of_floors
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberOfFloors resets all changes to the "number_of_floors" field.
func (m *TowerMutation) ResetNumberOfFloors() {
	m.number_of_floors = nil
	m.addnumber_of_floors = nil
}

// SetNumberOfApartmentsPerFloor sets the "number_of_apartments_per_floor" field.
func (m *TowerMutation) SetNumberOfApartmentsPerFloor(i int) {
	m.number_of_apartments_per_floor = &i
	m.addnumber_of_apartments_per_floor = nil
}

// NumberOfApartmentsPerFloor returns the value of the "number_of_apartments_per_floor" field in the mutation.
func (m *TowerMutation) NumberOfApartmentsPerFloor() (r int, exists bool) {
	v := m.number_of_apartments_per_floor
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberOfApartmentsPerFloor returns the old "number_of_apartments_per_floor" field's value of the Tower entity.
// If the Tower object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TowerMutation) OldNumberOfApartmentsPerFloor(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberOfApartmentsPerFloor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberOfApartmentsPerFloor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberOfApartmentsPerFloor: %w", err)
	}
	return oldValue.NumberOfApartmentsPerFloor, nil
}

// AddNumberOfApartmentsPerFloor adds i to the "number_of_apartments_per_floor" field.
func (m *TowerMutation) AddNumberOfApartmentsPerFloor(i int) {
	if m.addnumber_of_apartments_per_floor != nil {
		*m.addnumber_of_apartments_per_floor += i
	} else {
		m.addnumber_of_apartments_per_floor = &i
	}
}

// AddedNumberOfApartmentsPerFloor returns the value that was added to the "number_of_apartments_per_floor" field in this mutation.
func (m *TowerMutation) AddedNumberOfApartmentsPerFloor() (r int, exists bool) {
	v := m.addnumber_of_apartments_per_floor
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberOfApartmentsPerFloor resets all changes to the "number_of_apartments_per_floor" field.
func (m *TowerMutation) ResetNumberOfApartmentsPerFloor() {
	m.number_of_apartments_per_floor = nil
	m.addnumber_of_apartments_per_floor = nil
}

// SetName sets the "name" field.
func (m *TowerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TowerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tower entity.
// If the Tower object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TowerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TowerMutation) ResetName() {
	m.name = nil
}

// SetRegisteredAt sets the "registered_at" field.
func (m *TowerMutation) SetRegisteredAt(t time.Time) {
	m.registered_at = &t
}

// RegisteredAt returns the value of the "registered_at" field in the mutation.
func (m *TowerMutation) RegisteredAt() (r time.Time, exists bool) {
	v := m.registered_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRegisteredAt returns the old "registered_at" field's value of the Tower entity.
// If the Tower object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TowerMutation) OldRegisteredAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegisteredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegisteredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegisteredAt: %w", err)
	}
	return oldValue.RegisteredAt, nil
}

// ResetRegisteredAt resets all changes to the "registered_at" field.
func (m *TowerMutation) ResetRegisteredAt() {
	m.registered_at = nil
}

// AddApartmentIDs adds the "apartments" edge to the Apartment entity by ids.
func (m *TowerMutation) AddApartmentIDs(ids ...int) {
	if m.apartments == nil {
		m.apartments = make(map[int]struct{})
	}
	for i := range ids {
		m.apartments[ids[i]] = struct{}{}
	}
}

// ClearApartments clears the "apartments" edge to the Apartment entity.
func (m *TowerMutation) ClearApartments() {
	m.clearedapartments = true
}

// ApartmentsCleared reports if the "apartments" edge to the Apartment entity was cleared.
func (m *TowerMutation) ApartmentsCleared() bool {
	return m.clearedapartments
}

// RemoveApartmentIDs removes the "apartments" edge to the Apartment entity by IDs.
func (m *TowerMutation) RemoveApartmentIDs(ids ...int) {
	if m.removedapartments == nil {
		m.removedapartments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.apartments, ids[i])
		m.removedapartments[ids[i]] = struct{}{}
	}
}

// RemovedApartments returns the removed IDs of the "apartments" edge to the Apartment entity.
func (m *TowerMutation) RemovedApartmentsIDs() (ids []int) {
	for id := range m.removedapartments {
		ids = append(ids, id)
	}
	return
}

// ApartmentsIDs returns the "apartments" edge IDs in the mutation.
func (m *TowerMutation) ApartmentsIDs() (ids []int) {
	for id := range m.apartments {
		ids = append(ids, id)
	}
	return
}

// ResetApartments resets all changes to the "apartments" edge.
func (m *TowerMutation) ResetApartments() {
	m.apartments = nil
	m.clearedapartments = false
	m.removedapartments = nil
}

// Where appends a list predicates to the TowerMutation builder.
func (m *TowerMutation) Where(ps ...predicate.Tower) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TowerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TowerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tower, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TowerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TowerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tower).
func (m *TowerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TowerMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.number_of_floors != nil {
		fields = append(fields, tower.FieldNumberOfFloors)
	}
	if m.number_of_apartments_per_floor != nil {
		fields = append(fields, tower.FieldNumberOfApartmentsPerFloor)
	}
	if m.name != nil {
		fields = append(fields, tower.FieldName)
	}
	if m.registered_at != nil {
		fields = append(fields, tower.FieldRegisteredAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TowerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tower.FieldNumberOfFloors:
		return m.NumberOfFloors()
	case tower.FieldNumberOfApartmentsPerFloor:
		return m.NumberOfApartmentsPerFloor()
	case tower.FieldName:
		return m.Name()
	case tower.FieldRegisteredAt:
		return m.RegisteredAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TowerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tower.FieldNumberOfFloors:
		return m.OldNumberOfFloors(ctx)
	case tower.FieldNumberOfApartmentsPerFloor:
		return m.OldNumberOfApartmentsPerFloor(ctx)
	case tower.FieldName:
		return m.OldName(ctx)
	case tower.FieldRegisteredAt:
		return m.OldRegisteredAt(ctx)
	}
	return nil, fmt.Errorf("unknown Tower field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TowerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tower.FieldNumberOfFloors:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberOfFloors(v)
		return nil
	case tower.FieldNumberOfApartmentsPerFloor:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberOfApartmentsPerFloor(v)
		return nil
	case tower.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tower.FieldRegisteredAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegisteredAt(v)
		return nil
	}
	return fmt.Errorf("unknown Tower field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TowerMutation) AddedFields() []string {
	var fields []string
	if m.addnumber_of_floors != nil {
		fields = append(fields, tower.FieldNumberOfFloors)
	}
	if m.addnumber_of_apartments_per_floor != nil {
		fields = append(fields, tower.FieldNumberOfApartmentsPerFloor)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TowerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tower.FieldNumberOfFloors:
		return m.AddedNumberOfFloors()
	case tower.FieldNumberOfApartmentsPerFloor:
		return m.AddedNumberOfApartmentsPerFloor()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TowerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tower.FieldNumberOfFloors:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberOfFloors(v)
		return nil
	case tower.FieldNumberOfApartmentsPerFloor:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberOfApartmentsPerFloor(v)
		return nil
	}
	return fmt.Errorf("unknown Tower numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TowerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TowerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TowerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tower nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TowerMutation) ResetField(name string) error {
	switch name {
	case tower.FieldNumberOfFloors:
		m.ResetNumberOfFloors()
		return nil
	case tower.FieldNumberOfApartmentsPerFloor:
		m.ResetNumberOfApartmentsPerFloor()
		return nil
	case tower.FieldName:
		m.ResetName()
		return nil
	case tower.FieldRegisteredAt:
		m.ResetRegisteredAt()
		return nil
	}
	return fmt.Errorf("unknown Tower field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TowerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.apartments != nil {
		edges = append(edges, tower.EdgeApartments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TowerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tower.EdgeApartments:
		ids := make([]ent.Value, 0, len(m.apartments))
		for id := range m.apartments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TowerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedapartments != nil {
		edges = append(edges, tower.EdgeApartments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TowerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tower.EdgeApartments:
		ids := make([]ent.Value, 0, len(m.removedapartments))
		for id := range m.removedapartments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TowerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedapartments {
		edges = append(edges, tower.EdgeApartments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TowerMutation) EdgeCleared(name string) bool {
	switch name {
	case tower.EdgeApartments:
		return m.clearedapartments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TowerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tower unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TowerMutation) ResetEdge(name string) error {
	switch name {
	case tower.EdgeApartments:
		m.ResetApartments()
		return nil
	}
	return fmt.Errorf("unknown Tower edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	first_name    *string
	last_name     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
