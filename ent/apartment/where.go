// Code generated by ent, DO NOT EDIT.

package apartment

import (
	"pinares/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Apartment {
	return predicate.Apartment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Apartment {
	return predicate.Apartment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Apartment {
	return predicate.Apartment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Apartment {
	return predicate.Apartment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Apartment {
	return predicate.Apartment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Apartment {
	return predicate.Apartment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Apartment {
	return predicate.Apartment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Apartment {
	return predicate.Apartment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Apartment {
	return predicate.Apartment(sql.FieldLTE(FieldID, id))
}

// Area applies equality check predicate on the "area" field. It's identical to AreaEQ.
func Area(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldEQ(FieldArea, v))
}

// Floor applies equality check predicate on the "floor" field. It's identical to FloorEQ.
func Floor(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldEQ(FieldFloor, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldEQ(FieldNumber, v))
}

// AreaEQ applies the EQ predicate on the "area" field.
func AreaEQ(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldEQ(FieldArea, v))
}

// AreaNEQ applies the NEQ predicate on the "area" field.
func AreaNEQ(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldNEQ(FieldArea, v))
}

// AreaIn applies the In predicate on the "area" field.
func AreaIn(vs ...int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldIn(FieldArea, vs...))
}

// AreaNotIn applies the NotIn predicate on the "area" field.
func AreaNotIn(vs ...int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldNotIn(FieldArea, vs...))
}

// AreaGT applies the GT predicate on the "area" field.
func AreaGT(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldGT(FieldArea, v))
}

// AreaGTE applies the GTE predicate on the "area" field.
func AreaGTE(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldGTE(FieldArea, v))
}

// AreaLT applies the LT predicate on the "area" field.
func AreaLT(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldLT(FieldArea, v))
}

// AreaLTE applies the LTE predicate on the "area" field.
func AreaLTE(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldLTE(FieldArea, v))
}

// FloorEQ applies the EQ predicate on the "floor" field.
func FloorEQ(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldEQ(FieldFloor, v))
}

// FloorNEQ applies the NEQ predicate on the "floor" field.
func FloorNEQ(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldNEQ(FieldFloor, v))
}

// FloorIn applies the In predicate on the "floor" field.
func FloorIn(vs ...int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldIn(FieldFloor, vs...))
}

// FloorNotIn applies the NotIn predicate on the "floor" field.
func FloorNotIn(vs ...int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldNotIn(FieldFloor, vs...))
}

// FloorGT applies the GT predicate on the "floor" field.
func FloorGT(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldGT(FieldFloor, v))
}

// FloorGTE applies the GTE predicate on the "floor" field.
func FloorGTE(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldGTE(FieldFloor, v))
}

// FloorLT applies the LT predicate on the "floor" field.
func FloorLT(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldLT(FieldFloor, v))
}

// FloorLTE applies the LTE predicate on the "floor" field.
func FloorLTE(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldLTE(FieldFloor, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int16) predicate.Apartment {
	return predicate.Apartment(sql.FieldLTE(FieldNumber, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Apartment {
	return predicate.Apartment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Apartment {
	return predicate.Apartment(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Apartment) predicate.Apartment {
	return predicate.Apartment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Apartment) predicate.Apartment {
	return predicate.Apartment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Apartment) predicate.Apartment {
	return predicate.Apartment(sql.NotPredicates(p))
}
