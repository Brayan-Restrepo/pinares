// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pinares/ent/apartment"
	"pinares/ent/tower"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TowerCreate is the builder for creating a Tower entity.
type TowerCreate struct {
	config
	mutation *TowerMutation
	hooks    []Hook
}

// SetNumberOfFloors sets the "number_of_floors" field.
func (tc *TowerCreate) SetNumberOfFloors(i int) *TowerCreate {
	tc.mutation.SetNumberOfFloors(i)
	return tc
}

// SetNumberOfApartmentsPerFloor sets the "number_of_apartments_per_floor" field.
func (tc *TowerCreate) SetNumberOfApartmentsPerFloor(i int) *TowerCreate {
	tc.mutation.SetNumberOfApartmentsPerFloor(i)
	return tc
}

// SetName sets the "name" field.
func (tc *TowerCreate) SetName(s string) *TowerCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TowerCreate) SetNillableName(s *string) *TowerCreate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetRegisteredAt sets the "registered_at" field.
func (tc *TowerCreate) SetRegisteredAt(t time.Time) *TowerCreate {
	tc.mutation.SetRegisteredAt(t)
	return tc
}

// AddApartmentIDs adds the "apartments" edge to the Apartment entity by IDs.
func (tc *TowerCreate) AddApartmentIDs(ids ...int) *TowerCreate {
	tc.mutation.AddApartmentIDs(ids...)
	return tc
}

// AddApartments adds the "apartments" edges to the Apartment entity.
func (tc *TowerCreate) AddApartments(a ...*Apartment) *TowerCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tc.AddApartmentIDs(ids...)
}

// Mutation returns the TowerMutation object of the builder.
func (tc *TowerCreate) Mutation() *TowerMutation {
	return tc.mutation
}

// Save creates the Tower in the database.
func (tc *TowerCreate) Save(ctx context.Context) (*Tower, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TowerCreate) SaveX(ctx context.Context) *Tower {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TowerCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TowerCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TowerCreate) defaults() {
	if _, ok := tc.mutation.Name(); !ok {
		v := tower.DefaultName
		tc.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TowerCreate) check() error {
	if _, ok := tc.mutation.NumberOfFloors(); !ok {
		return &ValidationError{Name: "number_of_floors", err: errors.New(`ent: missing required field "Tower.number_of_floors"`)}
	}
	if v, ok := tc.mutation.NumberOfFloors(); ok {
		if err := tower.NumberOfFloorsValidator(v); err != nil {
			return &ValidationError{Name: "number_of_floors", err: fmt.Errorf(`ent: validator failed for field "Tower.number_of_floors": %w`, err)}
		}
	}
	if _, ok := tc.mutation.NumberOfApartmentsPerFloor(); !ok {
		return &ValidationError{Name: "number_of_apartments_per_floor", err: errors.New(`ent: missing required field "Tower.number_of_apartments_per_floor"`)}
	}
	if v, ok := tc.mutation.NumberOfApartmentsPerFloor(); ok {
		if err := tower.NumberOfApartmentsPerFloorValidator(v); err != nil {
			return &ValidationError{Name: "number_of_apartments_per_floor", err: fmt.Errorf(`ent: validator failed for field "Tower.number_of_apartments_per_floor": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Tower.name"`)}
	}
	if _, ok := tc.mutation.RegisteredAt(); !ok {
		return &ValidationError{Name: "registered_at", err: errors.New(`ent: missing required field "Tower.registered_at"`)}
	}
	return nil
}

func (tc *TowerCreate) sqlSave(ctx context.Context) (*Tower, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TowerCreate) createSpec() (*Tower, *sqlgraph.CreateSpec) {
	var (
		_node = &Tower{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tower.Table, sqlgraph.NewFieldSpec(tower.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.NumberOfFloors(); ok {
		_spec.SetField(tower.FieldNumberOfFloors, field.TypeInt, value)
		_node.NumberOfFloors = value
	}
	if value, ok := tc.mutation.NumberOfApartmentsPerFloor(); ok {
		_spec.SetField(tower.FieldNumberOfApartmentsPerFloor, field.TypeInt, value)
		_node.NumberOfApartmentsPerFloor = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(tower.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.RegisteredAt(); ok {
		_spec.SetField(tower.FieldRegisteredAt, field.TypeTime, value)
		_node.RegisteredAt = value
	}
	if nodes := tc.mutation.ApartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tower.ApartmentsTable,
			Columns: []string{tower.ApartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apartment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TowerCreateBulk is the builder for creating many Tower entities in bulk.
type TowerCreateBulk struct {
	config
	err      error
	builders []*TowerCreate
}

// Save creates the Tower entities in the database.
func (tcb *TowerCreateBulk) Save(ctx context.Context) ([]*Tower, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tower, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TowerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TowerCreateBulk) SaveX(ctx context.Context) []*Tower {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TowerCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TowerCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
